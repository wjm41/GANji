{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/eos/home-d/drousso/SWAN_projects/Other/GANji\n",
      "DAVID\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import random\n",
    "import re\n",
    "import glob\n",
    "from PIL import Image,ImageDraw,ImageFont\n",
    "\n",
    "import ENVCONFIG"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load annotated font .csv and define root directory containing google fonts repo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('google-fonts-annotation.csv')\n",
    "\n",
    "# change your path here\n",
    "rds_dir = ENVCONFIG.rds_dir\n",
    "ROOT = rds_dir+'/fonts/ofl'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "define font filtering & retrieval function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def filter_fonts_get_paths(df, root='./', variants=['_'], subsets=['_'], category=''):\n",
    "    # exceptions\n",
    "    if not variants or variants == [''] or variants == '': variants = ['_']\n",
    "    if not subsets or subsets == [''] or subsets == '': subsets = ['_']\n",
    "    # apply filters\n",
    "    regex_filters = variants + subsets + ['_'+category]\n",
    "    df_new = pd.concat([df.filter(regex=re.compile(regex, re.IGNORECASE), axis=1).sum(axis=1).astype(bool) for regex in regex_filters], axis=1)\n",
    "    mask = df_new.all(axis=1)\n",
    "    filtered_fontnames = list(df.loc[mask].family)\n",
    "    # construct file paths\n",
    "    paths = []\n",
    "    for fontname in filtered_fontnames:\n",
    "        if variants == ['_']: # select all variants\n",
    "            sel = glob.glob(f'{root}/{fontname.lower()}/**/**/**/*.ttf', recursive=True)\n",
    "            paths.extend(sel)\n",
    "        else:\n",
    "            for variant in variants:\n",
    "                sel = glob.glob(f'{root}/{fontname.lower()}/**/**/{fontname}-{variant}.ttf', recursive=True) \n",
    "                for path in sel:\n",
    "                    paths.append(path)\n",
    "    print(f'Found {len(paths)} font files.')\n",
    "    return paths"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'aaaaa' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_694/2528159646.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0maaaaa\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'aaaaa' is not defined"
     ]
    }
   ],
   "source": [
    "aaaaa"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create data for list of characters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2106906591.py, line 39)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_694/2106906591.py\"\u001b[0;36m, line \u001b[0;32m39\u001b[0m\n\u001b[0;31m    folder=\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "characters=[\"福\"]\n",
    "IMG_WIDTH = 300\n",
    "IMG_HEIGHT = 300\n",
    "text_size = 150\n",
    "\n",
    "\n",
    "paths = filter_fonts_get_paths(df, root=ROOT, subsets=['japanese'], variants=['_'], category='')\n",
    "for text in characters:\n",
    "    characterfolder=os.path.join('data',text)\n",
    "    os.mkdir(characterfolder)\n",
    "    for r in range(16):\n",
    "        # sample text and font\n",
    "\n",
    "\n",
    "        font = ImageFont.truetype(paths[r], text_size)\n",
    "\n",
    "        # # get text info (not being used but may be useful)\n",
    "        text_width, text_height = font.getsize(text)\n",
    "        left, top, right, bottom = font.getbbox(text)\n",
    "        print('text w & h: ', text_width, text_height)\n",
    "        print(left, top, right, bottom)\n",
    "\n",
    "\n",
    "\n",
    "        x = (right-left) # we can adjust this according to IMG_WIDTH etc\n",
    "        y = 150+(bottom-top)/2\n",
    "\n",
    "        # create a blank canvas with extra space between lines\n",
    "        canvas = Image.new('RGB', (IMG_WIDTH, IMG_HEIGHT), \"red\")\n",
    "\n",
    "        # draw the text onto the text canvas\n",
    "        draw = ImageDraw.Draw(canvas)\n",
    "        draw.text((x, y), text, 'black', font, anchor='ms')\n",
    "\n",
    "        fig = plt.figure(figsize=(10,10))\n",
    "        plt.imshow(canvas, aspect='auto')\n",
    "        plt.axis('off')\n",
    "        \n",
    "        folder=\n",
    "        filename = os.path.join(characterfolder,f'example{r}.jpg')\n",
    "        plt.savefig(filename)\n",
    "        # plt.imsave(filename, canvas, cmap='gray')\n",
    "        # plt.imsave(filename, canvas)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Draw text example using a random font!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "paths = filter_fonts_get_paths(df, root=ROOT, subsets=['japanese'], variants=['_'], category='')\n",
    "r = random.randrange(0, len(paths))\n",
    "\n",
    "# sample text and font\n",
    "text = \"新年快樂\"\n",
    "text = \"身體健康\"\n",
    "text = \"心\\n想\\n事\\n成\"\n",
    "\n",
    "text_size = 150\n",
    "font = ImageFont.truetype(paths[r], text_size)\n",
    "\n",
    "# # get text info (not being used but may be useful)\n",
    "text_width, text_height = font.getsize(text)\n",
    "left, top, right, bottom = font.getbbox(text)\n",
    "print('text w & h: ', text_width, text_height)\n",
    "print(left, top, right, bottom)\n",
    "\n",
    "IMG_WIDTH = 300\n",
    "IMG_HEIGHT = 800\n",
    "\n",
    "x = 150 # we can adjust this according to IMG_WIDTH etc\n",
    "y = 150\n",
    "\n",
    "# create a blank canvas with extra space between lines\n",
    "canvas = Image.new('RGB', (IMG_WIDTH, IMG_HEIGHT), \"white\")\n",
    "\n",
    "# draw the text onto the text canvas\n",
    "draw = ImageDraw.Draw(canvas)\n",
    "draw.text((x, y), text, 'black', font, anchor='ms')\n",
    "\n",
    "fig = plt.figure(figsize=(10,30))\n",
    "plt.imshow(canvas, aspect='auto')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate 16 examples of `心想事成` and save to /data/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "paths = filter_fonts_get_paths(df, root=ROOT, subsets=['japanese'], variants=['_'], category='')\n",
    "for r in range(16):\n",
    "    # sample text and font\n",
    "    text = \"心\\n想\\n事\\n成\"\n",
    "\n",
    "    text_size = 150\n",
    "    font = ImageFont.truetype(paths[r], text_size)\n",
    "\n",
    "    # # get text info (not being used but may be useful)\n",
    "    text_width, text_height = font.getsize(text)\n",
    "    left, top, right, bottom = font.getbbox(text)\n",
    "    print('text w & h: ', text_width, text_height)\n",
    "    print(left, top, right, bottom)\n",
    "\n",
    "    IMG_WIDTH = 300\n",
    "    IMG_HEIGHT = 800\n",
    "\n",
    "    x = 150 # we can adjust this according to IMG_WIDTH etc\n",
    "    y = 150\n",
    "\n",
    "    # create a blank canvas with extra space between lines\n",
    "    canvas = Image.new('RGB', (IMG_WIDTH, IMG_HEIGHT), \"white\")\n",
    "\n",
    "    # draw the text onto the text canvas\n",
    "    draw = ImageDraw.Draw(canvas)\n",
    "    draw.text((x, y), text, 'black', font, anchor='ms')\n",
    "\n",
    "    fig = plt.figure(figsize=(10,30))\n",
    "    # plt.imshow(canvas, aspect='auto')\n",
    "    filename = f'data/example{r}.jpg'\n",
    "    # plt.imsave(filename, canvas, cmap='gray')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Generate 16 square examples of `福` and save to `data`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "paths = filter_fonts_get_paths(df, root=ROOT, subsets=['japanese'], variants=['_'], category='')\n",
    "for r in range(16):\n",
    "    # sample text and font\n",
    "    text = \"福\"\n",
    "\n",
    "    text_size = 150\n",
    "    font = ImageFont.truetype(paths[r], text_size)\n",
    "\n",
    "    # # get text info (not being used but may be useful)\n",
    "    text_width, text_height = font.getsize(text)\n",
    "    left, top, right, bottom = font.getbbox(text)\n",
    "    print('text w & h: ', text_width, text_height)\n",
    "    print(left, top, right, bottom)\n",
    "\n",
    "    IMG_WIDTH = 300\n",
    "    IMG_HEIGHT = 300\n",
    "\n",
    "    x = (right-left) # we can adjust this according to IMG_WIDTH etc\n",
    "    y = 150+(bottom-top)/2\n",
    "\n",
    "    # create a blank canvas with extra space between lines\n",
    "    canvas = Image.new('RGB', (IMG_WIDTH, IMG_HEIGHT), \"red\")\n",
    "\n",
    "    # draw the text onto the text canvas\n",
    "    draw = ImageDraw.Draw(canvas)\n",
    "    draw.text((x, y), text, 'black', font, anchor='ms')\n",
    "\n",
    "    fig = plt.figure(figsize=(10,10))\n",
    "    plt.imshow(canvas, aspect='auto')\n",
    "    filename = f'data/calligraphy/example{r}.jpg'\n",
    "    plt.savefig(filename)\n",
    "    # plt.imsave(filename, canvas, cmap='gray')\n",
    "    # plt.imsave(filename, canvas)\n"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "7367a18b348ca6007dd30e14cd00de3b4d55612a2acbb3a217e58adb00f48737"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
