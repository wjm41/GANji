{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'cv2'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_514/3900878719.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mshutil\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrandom\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'cv2'"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "import os\n",
    "import shutil\n",
    "import cv2\n",
    "\n",
    "import random\n",
    "import re\n",
    "import glob\n",
    "from PIL import Image,ImageDraw,ImageFont\n",
    "\n",
    "import ENVCONFIG"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Load annotated font .csv and define root directory containing google fonts repo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('google-fonts-annotation.csv')\n",
    "\n",
    "# change your path here\n",
    "rds_dir = ENVCONFIG.rds_dir\n",
    "ROOT = rds_dir+'/fonts/ofl'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "define font filtering & retrieval function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def filter_fonts_get_paths(df, root='./', variants=['_'], subsets=['_'], category=''):\n",
    "    # exceptions\n",
    "    if not variants or variants == [''] or variants == '': variants = ['_']\n",
    "    if not subsets or subsets == [''] or subsets == '': subsets = ['_']\n",
    "    # apply filters\n",
    "    regex_filters = variants + subsets + ['_'+category]\n",
    "    df_new = pd.concat([df.filter(regex=re.compile(regex, re.IGNORECASE), axis=1).sum(axis=1).astype(bool) for regex in regex_filters], axis=1)\n",
    "    mask = df_new.all(axis=1)\n",
    "    filtered_fontnames = list(df.loc[mask].family)\n",
    "    # construct file paths\n",
    "    paths = []\n",
    "    for fontname in filtered_fontnames:\n",
    "        if variants == ['_']: # select all variants\n",
    "            sel = glob.glob(f'{root}/{fontname.lower()}/**/**/**/*.ttf', recursive=True)\n",
    "            paths.extend(sel)\n",
    "        else:\n",
    "            for variant in variants:\n",
    "                sel = glob.glob(f'{root}/{fontname.lower()}/**/**/{fontname}-{variant}.ttf', recursive=True) \n",
    "                for path in sel:\n",
    "                    paths.append(path)\n",
    "    print(f'Found {len(paths)} font files.')\n",
    "    return paths"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Define font blacklist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/eos/home-d/drousso/SWAN_projects/Other/fonts/ofl/delagothicone/DelaGothicOne-Regular.ttf'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fontblacklist=[]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create data for list of characters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 90 font files.\n",
      "text w & h:  152 174\n",
      "-2 59 150 174\n",
      "text w & h:  150 187\n",
      "0 46 150 187\n",
      "text w & h:  150 195\n",
      "0 59 150 195\n",
      "text w & h:  150 184\n",
      "0 48 150 184\n",
      "text w & h:  151 186\n",
      "-1 47 150 186\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 183\n",
      "0 49 150 183\n",
      "text w & h:  151 186\n",
      "-1 47 150 186\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 183\n",
      "0 49 150 183\n",
      "text w & h:  151 186\n",
      "-1 47 150 186\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 183\n",
      "0 49 150 183\n",
      "text w & h:  151 186\n",
      "-1 47 150 186\n",
      "text w & h:  151 187\n",
      "-1 46 150 187\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 183\n",
      "0 49 150 183\n",
      "text w & h:  150 182\n",
      "0 53 150 182\n",
      "text w & h:  150 184\n",
      "0 52 150 184\n",
      "text w & h:  150 183\n",
      "0 52 150 183\n",
      "text w & h:  150 186\n",
      "0 57 150 186\n",
      "text w & h:  150 188\n",
      "0 54 150 188\n",
      "text w & h:  150 186\n",
      "0 53 150 186\n",
      "text w & h:  150 163\n",
      "0 28 150 163\n",
      "text w & h:  150 177\n",
      "0 39 150 177\n",
      "text w & h:  150 176\n",
      "0 40 150 176\n",
      "text w & h:  150 177\n",
      "0 39 150 177\n",
      "text w & h:  150 175\n",
      "0 41 150 175\n",
      "text w & h:  150 176\n",
      "0 40 150 176\n",
      "text w & h:  150 176\n",
      "0 40 150 176\n",
      "text w & h:  150 174\n",
      "0 42 150 174\n",
      "text w & h:  150 186\n",
      "0 53 150 186\n",
      "text w & h:  150 189\n",
      "0 46 150 189\n",
      "text w & h:  150 189\n",
      "0 46 150 189\n",
      "text w & h:  150 186\n",
      "0 54 150 186\n",
      "text w & h:  150 189\n",
      "0 51 150 189\n",
      "text w & h:  75 174\n",
      "0 76 75 174\n",
      "text w & h:  150 179\n",
      "0 55 150 179\n",
      "text w & h:  150 186\n",
      "0 48 150 186\n",
      "text w & h:  150 196\n",
      "0 50 150 196\n",
      "text w & h:  150 186\n",
      "0 50 150 186\n",
      "text w & h:  150 179\n",
      "0 55 150 179\n",
      "text w & h:  150 186\n",
      "0 50 150 186\n",
      "text w & h:  150 177\n",
      "0 41 150 177\n",
      "text w & h:  150 171\n",
      "0 35 150 171\n",
      "text w & h:  150 187\n",
      "0 47 150 187\n",
      "text w & h:  150 187\n",
      "0 47 150 187\n",
      "text w & h:  150 187\n",
      "0 46 150 187\n",
      "text w & h:  150 187\n",
      "0 46 150 187\n",
      "text w & h:  150 186\n",
      "0 47 150 186\n",
      "text w & h:  150 186\n",
      "0 48 150 186\n",
      "text w & h:  150 187\n",
      "0 47 150 187\n",
      "text w & h:  150 188\n",
      "0 46 150 188\n",
      "text w & h:  150 188\n",
      "0 46 150 188\n",
      "text w & h:  150 187\n",
      "0 48 150 187\n",
      "text w & h:  150 186\n",
      "0 48 150 186\n",
      "text w & h:  150 187\n",
      "0 48 150 187\n",
      "text w & h:  150 179\n",
      "0 55 150 179\n",
      "text w & h:  150 183\n",
      "0 55 150 183\n",
      "text w & h:  150 186\n",
      "0 50 150 186\n",
      "text w & h:  150 184\n",
      "0 56 150 184\n",
      "text w & h:  150 184\n",
      "0 57 150 184\n",
      "text w & h:  75 174\n",
      "0 44 75 174\n",
      "text w & h:  75 174\n",
      "0 44 75 174\n",
      "text w & h:  150 184\n",
      "0 57 150 184\n",
      "text w & h:  150 184\n",
      "0 57 150 184\n",
      "text w & h:  150 183\n",
      "0 50 150 183\n",
      "text w & h:  149 185\n",
      "0 49 149 185\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 185\n",
      "0 48 150 185\n",
      "text w & h:  150 185\n",
      "0 48 150 185\n",
      "text w & h:  150 185\n",
      "0 48 150 185\n",
      "text w & h:  150 185\n",
      "0 48 150 185\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 185\n",
      "0 48 150 185\n",
      "text w & h:  150 185\n",
      "0 48 150 185\n",
      "text w & h:  150 185\n",
      "0 48 150 185\n",
      "text w & h:  150 185\n",
      "0 48 150 185\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 185\n",
      "0 47 150 185\n",
      "text w & h:  150 187\n",
      "0 46 150 187\n",
      "text w & h:  150 187\n",
      "0 46 150 187\n",
      "text w & h:  150 187\n",
      "0 47 150 187\n",
      "text w & h:  150 187\n",
      "0 47 150 187\n",
      "text w & h:  150 187\n",
      "0 47 150 187\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n",
      "text w & h:  150 185\n",
      "0 49 150 185\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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oJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqCR4AoJ7gAQDqzebz+dQzAABcVc7wAAD1BA8AUE/wAAD1BA8AUE/wAAD1BA8AUO9/AKpx8FAls7+gAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 720x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "characters=[\"福\"]\n",
    "characters=[\"福\",\"新\",\"年\",\"快\",\"樂\",\"身\",\"體\",\"健\",\"康\",\"心\",\"想\",\"事\",\"成\"]\n",
    "IMG_WIDTH = 300\n",
    "IMG_HEIGHT = 300\n",
    "text_size = 150\n",
    "\n",
    "maxplotstoshow=1\n",
    "\n",
    "paths = filter_fonts_get_paths(df, root=ROOT, subsets=['japanese'], variants=['_'], category='')\n",
    "for text in characters:\n",
    "    characterfolder=os.path.join('data',text)\n",
    "    shutil.rmtree(characterfolder)\n",
    "    try:\n",
    "        os.mkdir(characterfolder)\n",
    "    except:\n",
    "        pass\n",
    "    \n",
    "    \n",
    "    for r in range(len(paths)):\n",
    "        # sample text and font\n",
    "\n",
    "        fontname=os.path.basename(paths[r]).split('.tff')[0] \n",
    "        if fontname in fontblacklist:\n",
    "            continue\n",
    "            \n",
    "        font = ImageFont.truetype(paths[r], text_size)\n",
    "\n",
    "        # # get text info (not being used but may be useful)\n",
    "        text_width, text_height = font.getsize(text)\n",
    "        left, top, right, bottom = font.getbbox(text)\n",
    "        print('text w & h: ', text_width, text_height)\n",
    "        print(left, top, right, bottom)\n",
    "\n",
    "\n",
    "\n",
    "        x = (right-left) # we can adjust this according to IMG_WIDTH etc\n",
    "        y = 150+(bottom-top)/2\n",
    "\n",
    "        # create a blank canvas with extra space between lines\n",
    "        canvas = Image.new('RGB', (IMG_WIDTH, IMG_HEIGHT), \"red\")\n",
    "\n",
    "        # draw the text onto the text canvas\n",
    "        draw = ImageDraw.Draw(canvas)\n",
    "        draw.text((x, y), text, 'black', font, anchor='ms')\n",
    "\n",
    "        fig = plt.figure(figsize=(10,10))\n",
    "        plt.imshow(canvas, aspect='auto')\n",
    "        plt.axis('off')\n",
    "        \n",
    "        filename = os.path.join(characterfolder,fontname+'.jpg')\n",
    "        plt.savefig(filename)\n",
    "        #plt.title(fontname)\n",
    "        # plt.imsave(filename, canvas, cmap='gray')\n",
    "        # plt.imsave(filename, canvas)\n",
    "        if r>maxplotstoshow:\n",
    "            plt.close()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check images:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'cv2' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_514/353544590.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mfoldertocheck\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcharactertocheck\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mimages\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mload_images_from_folder\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfoldertocheck\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/tmp/ipykernel_514/353544590.py\u001b[0m in \u001b[0;36mload_images_from_folder\u001b[0;34m(folder)\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mimages\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mfilename\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfolder\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m         \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcv2\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfolder\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mimg\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m             \u001b[0mimages\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'cv2' is not defined"
     ]
    }
   ],
   "source": [
    "charactertocheck=\"福\"\n",
    "\n",
    "\n",
    "\n",
    "def load_images_from_folder(folder):\n",
    "    images = []\n",
    "    for filename in os.listdir(folder):\n",
    "        img = cv2.imread(os.path.join(folder,filename))\n",
    "        if img is not None:\n",
    "            images.append(img)\n",
    "    return images\n",
    "foldertocheck=os.path.join('data',charactertocheck)\n",
    "images=load_images_from_folder(foldertocheck)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'example0.jpg'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_514/2609153043.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mfile\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m     \u001b[0mprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/tmp/ipykernel_514/2609153043.py\u001b[0m in \u001b[0;36mprocess\u001b[0;34m(filename)\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mpath\u001b[0m \u001b[0mto\u001b[0m \u001b[0mfilename\u001b[0m \u001b[0mcontaining\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \"\"\"\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0mimage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmpimg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m     \u001b[0;31m# <something gets done here>\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc8-opt/lib/python3.9/site-packages/matplotlib/image.py\u001b[0m in \u001b[0;36mimread\u001b[0;34m(fname, format)\u001b[0m\n\u001b[1;32m   1499\u001b[0m                     \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1500\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1501\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mimg_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1502\u001b[0m         return (_pil_png_to_float_array(image)\n\u001b[1;32m   1503\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mPIL\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPngImagePlugin\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPngImageFile\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/cvmfs/sft.cern.ch/lcg/views/LCG_101swan/x86_64-centos7-gcc8-opt/lib/python3.9/site-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode, formats)\u001b[0m\n\u001b[1;32m   2910\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2911\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2912\u001b[0;31m         \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2913\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2914\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'example0.jpg'"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.image as mpimg\n",
    "\n",
    "images=os.listdir(os.path.join('data',charactertocheck))\n",
    "\n",
    "def process(filename: str=None) -> None:\n",
    "    \"\"\"\n",
    "    View multiple images stored in files, stacking vertically\n",
    "\n",
    "    Arguments:\n",
    "        filename: str - path to filename containing image\n",
    "    \"\"\"\n",
    "    image = mpimg.imread(filename)\n",
    "    # <something gets done here>\n",
    "    plt.figure()\n",
    "    plt.imshow(image)\n",
    "\n",
    "for file in images:\n",
    "    process(file)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'d'"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['example0.jpg',\n",
       " 'example1.jpg',\n",
       " 'example10.jpg',\n",
       " 'example11.jpg',\n",
       " 'example12.jpg',\n",
       " 'example13.jpg',\n",
       " 'example14.jpg',\n",
       " 'example15.jpg',\n",
       " 'example16.jpg',\n",
       " 'example17.jpg',\n",
       " 'example18.jpg',\n",
       " 'example19.jpg',\n",
       " 'example2.jpg',\n",
       " 'example20.jpg',\n",
       " 'example21.jpg',\n",
       " 'example22.jpg',\n",
       " 'example23.jpg',\n",
       " 'example24.jpg',\n",
       " 'example25.jpg',\n",
       " 'example26.jpg',\n",
       " 'example27.jpg',\n",
       " 'example28.jpg',\n",
       " 'example29.jpg',\n",
       " 'example3.jpg',\n",
       " 'example30.jpg',\n",
       " 'example31.jpg',\n",
       " 'example32.jpg',\n",
       " 'example33.jpg',\n",
       " 'example34.jpg',\n",
       " 'example35.jpg',\n",
       " 'example36.jpg',\n",
       " 'example37.jpg',\n",
       " 'example38.jpg',\n",
       " 'example39.jpg',\n",
       " 'example4.jpg',\n",
       " 'example40.jpg',\n",
       " 'example41.jpg',\n",
       " 'example42.jpg',\n",
       " 'example43.jpg',\n",
       " 'example44.jpg',\n",
       " 'example45.jpg',\n",
       " 'example46.jpg',\n",
       " 'example47.jpg',\n",
       " 'example48.jpg',\n",
       " 'example49.jpg',\n",
       " 'example5.jpg',\n",
       " 'example50.jpg',\n",
       " 'example51.jpg',\n",
       " 'example52.jpg',\n",
       " 'example53.jpg',\n",
       " 'example54.jpg',\n",
       " 'example55.jpg',\n",
       " 'example56.jpg',\n",
       " 'example57.jpg',\n",
       " 'example58.jpg',\n",
       " 'example59.jpg',\n",
       " 'example6.jpg',\n",
       " 'example60.jpg',\n",
       " 'example61.jpg',\n",
       " 'example62.jpg',\n",
       " 'example63.jpg',\n",
       " 'example64.jpg',\n",
       " 'example65.jpg',\n",
       " 'example66.jpg',\n",
       " 'example67.jpg',\n",
       " 'example68.jpg',\n",
       " 'example69.jpg',\n",
       " 'example7.jpg',\n",
       " 'example70.jpg',\n",
       " 'example71.jpg',\n",
       " 'example72.jpg',\n",
       " 'example73.jpg',\n",
       " 'example74.jpg',\n",
       " 'example75.jpg',\n",
       " 'example76.jpg',\n",
       " 'example77.jpg',\n",
       " 'example78.jpg',\n",
       " 'example79.jpg',\n",
       " 'example8.jpg',\n",
       " 'example80.jpg',\n",
       " 'example81.jpg',\n",
       " 'example82.jpg',\n",
       " 'example83.jpg',\n",
       " 'example84.jpg',\n",
       " 'example85.jpg',\n",
       " 'example86.jpg',\n",
       " 'example87.jpg',\n",
       " 'example88.jpg',\n",
       " 'example89.jpg',\n",
       " 'example9.jpg']"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(os.path.join('data',charactertocheck))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "7367a18b348ca6007dd30e14cd00de3b4d55612a2acbb3a217e58adb00f48737"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
